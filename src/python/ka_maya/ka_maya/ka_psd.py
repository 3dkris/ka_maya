#====================================================================================
#====================================================================================
#
# ka_psd
#
# DESCRIPTION:
#   pose space deformer tools
#
# DEPENDENCEYS:
#   Maya
#   Pymel
#
# AUTHOR:
#   Kris Andrews (3dkris@3dkris.com)
#
#====================================================================================
#Redistribution and use in source and binary forms, with or without
#modification, are permitted provided that the following conditions are
#met:

    #(1) Redistributions of source code must retain the above copyright
    #notice, this list of conditions and the following disclaimer.

    #(2) Redistributions in binary form must reproduce the above copyright
    #notice, this list of conditions and the following disclaimer in
    #the documentation and/or other materials provided with the
    #distribution.

    #(3)The name of the author may not be used to
    #endorse or promote products derived from this software without
    #specific prior written permission.

#THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
#IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#POSSIBILITY OF SUCH DAMAGE.
#====================================================================================

import traceback

import pymel.core as pymel
import maya.cmds as cmds
import maya.mel as mel

import ka_maya.ka_math as ka_math
import ka_maya.ka_shapes as ka_shapes

POINTSET_A = [[0.0, 0.0, 0.0], [0.19201440852636581, 0.96435069093694414, 0.18209396422646282], [0.55354577303187269, 0.83258627561349374, 0.019676656692586884], [0.085870819254407579, 0.99587118967347454, -0.029441059405449853], [0.073475920362927313, 0.90621111458706527, 0.41639248903611326], [0.72634340775202433, 0.63945619969904055, -0.25203377289886625], [0.48491977222260269, 0.77902719003798959, 0.39745371012118269], [-0.18318641167566949, 0.98307733040520751, 0.0013042318669126496], [0.17481407783652855, 0.75569504266483001, -0.63116165970531268], [0.26289548351096254, 0.79556173943593567, 0.5458639789317532], [-0.42199401735972442, 0.79204809072381732, 0.44111321822561184], [0.88309818059540546, 0.40528536476308363, -0.23639242064401914], [0.4803883092432234, 0.63741320184526917, -0.60243794905018999], [0.84802308729812126, 0.39524923471864276, 0.35303666362530978], [-0.57690654122534069, 0.53104687570400377, -0.62061909291966721], [-0.31197633876790765, 0.90561440040228458, 0.28728613233670403], [-0.3290700526339288, 0.48813181228797203, -0.80835650197914732], [0.24794785327868796, 0.62892183155713755, 0.73687121795148547], [-0.42033169336345755, 0.49981176936472821, 0.75730407549326451], [0.69348241297742086, 0.2251597710945803, -0.68438674765928231], [0.95889055206840379, 0.27008347520632969, 0.087085162768544014], [0.32303829237970311, 0.34958332820379689, -0.87945310181860281], [0.80724811167928456, 0.1574097515089366, 0.56883447181067015], [-0.86599965402431534, 0.13447357285086994, -0.48162377166673126], [-0.86585888158647051, 0.43901954772600654, 0.23989629820461822], [-0.41416030666987863, 0.1336109480270517, -0.90034402033135352], [0.45924241534857124, 0.44119502492850499, 0.77100152653749421], [-0.082085091391583695, 0.33356479075886947, 0.93914672343421779], [-0.67539477227271849, 0.24827903815130481, 0.69440580412417752], [0.67539477227271849, -0.24827903815130481, -0.69440580412417752], [0.98617382520300789, -0.067202641320041778, 0.15147604260765823], [-0.078141131162087735, 0.066771826544811549, -0.9947037180993038], [0.86599965402431534, -0.13447357285086994, 0.48162377166673126], [-0.80724811167928456, -0.1574097515089366, -0.56883447181067015], [-0.98617382520300789, 0.067202641320041778, -0.15147604260765823], [-0.55851556445406847, -0.17074333595817714, -0.81173091445898882], [0.41416030666987863, -0.1336109480270517, 0.90034402033135352], [0.078141131162087735, -0.066771826544811549, 0.9947037180993038], [-0.69348241297742086, -0.2251597710945803, 0.68438674765928231], [0.42033169336345755, -0.49981176936472821, -0.75730407549326451], [0.86585888158647051, -0.43901954772600654, -0.23989629820461822], [0.082085091391583695, -0.33356479075886947, -0.93914672343421779], [0.57690654122534069, -0.53104687570400377, 0.62061909291966721], [-0.84802308729812126, -0.39524923471864276, -0.35303666362530978], [-0.95889055206840379, -0.27008347520632969, -0.087085162768544014], [-0.204743779973412, -0.47928891644075572, -0.85344133901472408], [0.3290700526339288, -0.48813181228797203, 0.80835650197914732], [-0.32303829237970311, -0.34958332820379689, 0.87945310181860281], [-0.88309818059540546, -0.40528536476308363, 0.23639242064401914], [0.42199401735972442, -0.79204809072381732, -0.44111321822561184], [0.56399371462894532, -0.81492567472222432, -0.13344375046277498], [0.34351966397675071, -0.88975460818937646, 0.30055112321711475], [-0.59376932102977409, -0.72327969159348959, -0.35256840631609043], [-0.18437104006102306, -0.78253292434397848, -0.59468440529786704], [-0.17481407783652855, -0.75569504266483001, 0.63116165970531268], [-0.4803883092432234, -0.63741320184526917, 0.60243794905018999], [-0.72634340775202433, -0.63945619969904055, 0.25203377289886625], [0.12112227994113979, -0.92059686154442333, -0.37125572294096415], [-0.064350459770984095, -0.94917553404781074, 0.30809872426272117], [-0.55354577303187269, -0.83258627561349374, -0.019676656692586884], [-0.14832483200348548, -0.98882529272576991, -0.014976136916220979], ]
#TETRAPOINTSET_A = []
for point in POINTSET_A:
    tetra = []

def makeTetraSphere():
    cmds.file(newFile=True, force=True)
    for point in POINTSET_A:
        loc = pymel.spaceLocator()
        loc.t.set(point)
        locShape = loc.getShape()
        locShape.localScaleX.set(0.05)
        locShape.localScaleY.set(0.05)
        locShape.localScaleZ.set(0.05)

    #tetrahedrons = ka_math.tetrahedralizePoints(POINTSET_A)
    #for tetrahedron in tetrahedrons:
        #ka_shapes.polyTetrahedron(tetrahedron)

def generateRandomeVectors():
    pass


def trianglulate(points):
    numberOfPoints = len(points)
    dimentions = len(points[0])
    edgeDict = {}
    faceDict = {}
    simplexDict = {}

    pointDict = {}
    for i, point in enumerate(points):
        pointDict[i] = point

    simplex = []
    for i in range(dimentions):
        points[0]
    for i in pointDict:
        points = pointDict[i]


        edgesAsVectors = {}
        for pointB in points:
            #if pointB
            pass

    return tetrahedrons


def drawPolygon():
    pass